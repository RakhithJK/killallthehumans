#!/usr/bin/env perl
#
# notes: 
# gpg --passphrase-file only reads the first line so we xor the keyfile with
# 0x0a to remove newlines

use warnings;
use strict;

use POE qw/Wheel::FollowTail/;
use MIME::Base64;

my $killdir             = "/etc/killallthehumans";
my $gpgkey              = "${killdir}/humans.key";
my $ramfs               = "/mnt/ramfs";
my $mntpoint            = "/mnt/shadow";
my $shadow              = "${mntpoint}/shadow.gpg";
my $shadow_decrypted    = "${ramfs}/shadow";
my $shadow_original     = "/etc/shadow";
my $file                = "/var/log/syslog";
my $setup               = 0;

$SIG{INT} = \&_cleanup;
$SIG{TERM} = \&_cleanup;

sub _do_cleanup {
  system("shred -u -n 1 ${shadow_decrypted} &> /dev/null");
  system("umount ${ramfs} 2>/dev/null");
  system("umount ${mntpoint} 2>/dev/null");
}

sub _do_mounts {
  my $dev = shift;

  system("mount -t ramfs -o size=1m ramfs ${ramfs}");
  system("mount -t auto /dev/${dev} ${mntpoint}");
}

sub _do_setup {
  my $dev = shift;

  # make sure directories exist
  mkdir($ramfs, 0700) unless (-d $ramfs);
  mkdir($mntpoint, 0700) unless (-d $mntpoint);
  mkdir($killdir, 0700) unless (-d $killdir);

  # create keyfile if it does not exist
  # set keyfile to immutable to try preventing modification/removal
  # gpg --passphrase-file only reads the first line so we xor the keyfile
  # with 0x0a to remove newlines
  if (! -f $gpgkey) {
    system("dd if=/dev/urandom bs=64 count=1 of=${gpgkey}.tmp 2>/dev/null");
    my $keybuffer;
    open(TMP, "${gpgkey}.tmp");
    open(KEY, ">${gpgkey}");
    binmode(TMP);
    binmode(KEY);
    read(TMP, $keybuffer, 64, 0);
    print KEY encode_base64($keybuffer);
    close(KEY);
    close(TMP);
    system("shred -u -n 1 ${gpgkey}.tmp");
    system("chattr +i ${gpgkey}");
  }

  # check if shadow file is a symlink, and if not:
  ## set up mounts
  ## encrypt shadow file to $shadow
  ## shred original shadow file
  ## create symlink to $shadow
  if (! -l $shadow_original) {
    _do_mounts($dev);
    system("shred -u -n 1 ${shadow} &> /dev/null");
    system("gpg -c -q --batch --no-use-agent --cipher-algo AES256 " .
           "-o ${shadow} --passphrase-file ${gpgkey} < ${shadow_original}");
    system("shred -u -n 1 ${shadow_decrypted} &> /dev/null");
    system("mv ${shadow_original} ${shadow_original}.killallthehumansd");
    system("ln -s ${shadow_decrypted} ${shadow_original}");
  }

  # switch setup flag to TRUE
  $setup = 1;
}

POE::Session->create(
  inline_states => {
    _start => sub {
      $_[HEAP]->{wheel} = POE::Wheel::FollowTail->new(
        Filename   => $file,
        InputEvent => 'got_line',
        ErrorEvent => 'got_error',
      );
    },
    got_line => sub {
      my ($line, $wheel_id) = @_[ARG0, ARG1];
      my $child = $_[HEAP]{children_by_wid}{$wheel_id};
      if ($line =~ /sd[a-z]: (sd[a-z][0-9]+)/) {
        my $dev = $1;
        # print "${line}\n";

        # make sure everything is setup for the first time
        if ($setup == 0) {
            _do_setup($dev);
        }

        # now we need to clean up and unmount old ramfs if it exists
        _do_cleanup();

        # make new ramfs and mount
        # XXX: we run this in _do_setup(), make sure it's okay to run twice in
        #      that case, or if there is a better place to run this.
        _do_mounts($dev);

        # once device is mounted do a decrypt and write data out to ramfs
        system("gpg -d -q --batch --no-use-agent --cipher-algo AES256 " .
               "-o ${shadow_decrypted} --passphrase-file ${gpgkey} < " .
               "${shadow}");
      } elsif ($line =~ /USB disconnect/) {
        # print "${line}\n";
        _do_cleanup();
      }
    },
    got_error => sub {
      my ($line, $wheel_id) = @_[ARG0, ARG1];
      my $child = $_[HEAP]{children_by_wid}{$wheel_id};
      warn "${line}\n"
    },
  },
  args => [$file],
);

POE::Kernel->run();

sub _cleanup {
  _do_cleanup();
  exit 0;
}

exit 0;
